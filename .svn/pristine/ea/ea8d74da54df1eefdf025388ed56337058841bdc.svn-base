<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_06) on Mon Oct 07 11:14:48 CDT 2013 -->
<title>BallWorldModel</title>
<meta name="date" content="2013-10-07">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="BallWorldModel";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallWorldModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../model/ViewAdapter.html" title="interface in model"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallWorldModel.html" target="_top">Frames</a></li>
<li><a href="BallWorldModel.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">model</div>
<h2 title="Class BallWorldModel" class="title">Class BallWorldModel</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>model.BallWorldModel</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">BallWorldModel</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../model/ViewAdapter.html" title="interface in model">ViewAdapter</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#adapter">adapter</a></strong></code>
<div class="block">adapter allows the model to communicate to the view via the controller</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../model/ball/Dispatcher.html" title="class in model.ball">Dispatcher</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#dispatcher">dispatcher</a></strong></code>
<div class="block">dispatcher observes all the balls and triggers updates</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#errorStrategyFac">errorStrategyFac</a></strong></code>
<div class="block">A factory for a beeping error strategy that beeps the speaker every 25 updates.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../util/Randomizer.html" title="class in util">Randomizer</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#random">random</a></strong></code>
<div class="block">Randomizer generates random values.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../update_strategies/SwitcherStrategy.html" title="class in update_strategies">SwitcherStrategy</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#switcher">switcher</a></strong></code>
<div class="block">Switch object for all balls</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private javax.swing.Timer</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#timer">timer</a></strong></code>
<div class="block">timer that animates balls</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../model/BallWorldModel.html#BallWorldModel(model.ViewAdapter)">BallWorldModel</a></strong>(<a href="../model/ViewAdapter.html" title="interface in model">ViewAdapter</a>&nbsp;viewAdapter)</code>
<div class="block">Constructor initializes adapter and dispatcher.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#clearBalls()">clearBalls</a></strong>()</code>
<div class="block">clearBalls wipes all the balls from the GUI.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#combineStrategyFacs(update_strategies.IStrategyFac, update_strategies.IStrategyFac)">combineStrategyFacs</a></strong>(<a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;stratFac1,
                   <a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;stratFac2)</code>
<div class="block">Function to package two IUpdateStrategies together</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#getSwitcher()">getSwitcher</a></strong>()</code>
<div class="block">Getter method for switcher strategy</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../model/ball/Ball.html" title="class in model.ball">Ball</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#loadBall(update_strategies.IUpdateStrategy, paint_strategies.IPaintStrategy)">loadBall</a></strong>(<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;thisStrategy,
        <a href="../paint_strategies/IPaintStrategy.html" title="interface in paint_strategies">IPaintStrategy</a>&nbsp;thisPaint)</code>
<div class="block">The following method returns an instance of a Ball, given a fully qualified class name (package.classname) of
 a strategy class.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../paint_strategies/IPaintStrategy.html" title="interface in paint_strategies">IPaintStrategy</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#loadPaintStrategy(java.lang.String)">loadPaintStrategy</a></strong>(java.lang.String&nbsp;paintName)</code>
<div class="block">The following method returns an instance of an IPaintStrategy, given a fully qualified class name (package.classname) of
 a subclass of ABall.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#loadStrategy(java.lang.String)">loadStrategy</a></strong>(java.lang.String&nbsp;strategyName)</code>
<div class="block">The following method returns an instance of an IUpdateStrategy, given a fully qualified class name (package.classname) of
 a subclass of ABall.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../paint_strategies/IPaintStrategyFac.html" title="interface in paint_strategies">IPaintStrategyFac</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#makePaintStrategyFac(java.lang.String)">makePaintStrategyFac</a></strong>(java.lang.String&nbsp;className)</code>
<div class="block">makePaintStrategyFac allows us to send packages b/t the model and view.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a></code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#makeStrategyFac(java.lang.String)">makeStrategyFac</a></strong>(java.lang.String&nbsp;className)</code>
<div class="block">makeStrategyFac allows us to send packages b/t the model and view.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#makeSwitcherBall()">makeSwitcherBall</a></strong>()</code>
<div class="block">Switch all the balls at once to a single strategy</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#setSwitcher(update_strategies.IUpdateStrategy)">setSwitcher</a></strong>(<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;mySwitcher)</code>
<div class="block">Set a new strategy for the switcher balls</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#start()">start</a></strong>()</code>
<div class="block">start method starts up timer and anything else that needs to happen 
 when the GUI is first run.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../model/BallWorldModel.html#update(java.awt.Graphics)">update</a></strong>(java.awt.Graphics&nbsp;g)</code>
<div class="block">Triggers update method of all balls and anonymously instantiates
 an IBallCmd object.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="adapter">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>adapter</h4>
<pre>private&nbsp;<a href="../model/ViewAdapter.html" title="interface in model">ViewAdapter</a> adapter</pre>
<div class="block">adapter allows the model to communicate to the view via the controller</div>
</li>
</ul>
<a name="timer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>timer</h4>
<pre>private&nbsp;javax.swing.Timer timer</pre>
<div class="block">timer that animates balls</div>
</li>
</ul>
<a name="dispatcher">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dispatcher</h4>
<pre>private&nbsp;<a href="../model/ball/Dispatcher.html" title="class in model.ball">Dispatcher</a> dispatcher</pre>
<div class="block">dispatcher observes all the balls and triggers updates</div>
</li>
</ul>
<a name="random">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>random</h4>
<pre>private&nbsp;<a href="../util/Randomizer.html" title="class in util">Randomizer</a> random</pre>
<div class="block">Randomizer generates random values.</div>
</li>
</ul>
<a name="switcher">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>switcher</h4>
<pre>private&nbsp;<a href="../update_strategies/SwitcherStrategy.html" title="class in update_strategies">SwitcherStrategy</a> switcher</pre>
<div class="block">Switch object for all balls</div>
</li>
</ul>
<a name="errorStrategyFac">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>errorStrategyFac</h4>
<pre>private&nbsp;<a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a> errorStrategyFac</pre>
<div class="block">A factory for a beeping error strategy that beeps the speaker every 25 updates.
 Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy,
 or call _errorStrategyFac.make() to create an instance of a beeping error strategy.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="BallWorldModel(model.ViewAdapter)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BallWorldModel</h4>
<pre>public&nbsp;BallWorldModel(<a href="../model/ViewAdapter.html" title="interface in model">ViewAdapter</a>&nbsp;viewAdapter)</pre>
<div class="block">Constructor initializes adapter and dispatcher.</div>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="start()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>start</h4>
<pre>public&nbsp;void&nbsp;start()</pre>
<div class="block">start method starts up timer and anything else that needs to happen 
 when the GUI is first run.</div>
</li>
</ul>
<a name="clearBalls()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clearBalls</h4>
<pre>public&nbsp;void&nbsp;clearBalls()</pre>
<div class="block">clearBalls wipes all the balls from the GUI.</div>
</li>
</ul>
<a name="update(java.awt.Graphics)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>update</h4>
<pre>public&nbsp;void&nbsp;update(java.awt.Graphics&nbsp;g)</pre>
<div class="block">Triggers update method of all balls and anonymously instantiates
 an IBallCmd object.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>g</code> - Graphics object</dd></dl>
</li>
</ul>
<a name="loadBall(update_strategies.IUpdateStrategy, paint_strategies.IPaintStrategy)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadBall</h4>
<pre>public&nbsp;<a href="../model/ball/Ball.html" title="class in model.ball">Ball</a>&nbsp;loadBall(<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;thisStrategy,
            <a href="../paint_strategies/IPaintStrategy.html" title="interface in paint_strategies">IPaintStrategy</a>&nbsp;thisPaint)</pre>
<div class="block">The following method returns an instance of a Ball, given a fully qualified class name (package.classname) of
 a strategy class.
 The method assumes that there is only one constructor for the supplied class that has the same *number* of
 input parameters as specified in the args array and that it conforms to a specific
 signature, i.e. specific order and types of input parameters in the args array.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>className</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="strong">Returns:</span></dt><dd>An instance of the supplied class.</dd></dl>
</li>
</ul>
<a name="loadStrategy(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadStrategy</h4>
<pre>public&nbsp;<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;loadStrategy(java.lang.String&nbsp;strategyName)</pre>
<div class="block">The following method returns an instance of an IUpdateStrategy, given a fully qualified class name (package.classname) of
 a subclass of ABall.
 The method assumes that there is only one constructor for the supplied class that has the same *number* of
 input parameters as specified in the args array and that it conforms to a specific
 signature, i.e. specific order and types of input parameters in the args array.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>className</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="strong">Returns:</span></dt><dd>An instance of the supplied class.</dd></dl>
</li>
</ul>
<a name="loadPaintStrategy(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadPaintStrategy</h4>
<pre>public&nbsp;<a href="../paint_strategies/IPaintStrategy.html" title="interface in paint_strategies">IPaintStrategy</a>&nbsp;loadPaintStrategy(java.lang.String&nbsp;paintName)</pre>
<div class="block">The following method returns an instance of an IPaintStrategy, given a fully qualified class name (package.classname) of
 a subclass of ABall.
 The method assumes that there is only one constructor for the supplied class that has the same *number* of
 input parameters as specified in the args array and that it conforms to a specific
 signature, i.e. specific order and types of input parameters in the args array.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>className</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="strong">Returns:</span></dt><dd>An instance of the supplied class.</dd></dl>
</li>
</ul>
<a name="makeStrategyFac(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeStrategyFac</h4>
<pre>public&nbsp;<a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;makeStrategyFac(java.lang.String&nbsp;className)</pre>
<div class="block">makeStrategyFac allows us to send packages b/t the model and view.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>className</code> - is the name of the strategy to make</dd>
<dt><span class="strong">Returns:</span></dt><dd>an IStrategyFac</dd></dl>
</li>
</ul>
<a name="makePaintStrategyFac(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makePaintStrategyFac</h4>
<pre>public&nbsp;<a href="../paint_strategies/IPaintStrategyFac.html" title="interface in paint_strategies">IPaintStrategyFac</a>&nbsp;makePaintStrategyFac(java.lang.String&nbsp;className)</pre>
<div class="block">makePaintStrategyFac allows us to send packages b/t the model and view.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>className</code> - is the name of the strategy to make</dd>
<dt><span class="strong">Returns:</span></dt><dd>an IPaintStrategyFac</dd></dl>
</li>
</ul>
<a name="combineStrategyFacs(update_strategies.IStrategyFac, update_strategies.IStrategyFac)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>combineStrategyFacs</h4>
<pre>public&nbsp;<a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;combineStrategyFacs(<a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;stratFac1,
                               <a href="../update_strategies/IStrategyFac.html" title="interface in update_strategies">IStrategyFac</a>&nbsp;stratFac2)</pre>
<div class="block">Function to package two IUpdateStrategies together</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>stratFac1</code> - strategy to combine</dd><dd><code>stratFac2</code> - strategy to combine</dd>
<dt><span class="strong">Returns:</span></dt><dd>and IStrategyFac that contains two strategies</dd></dl>
</li>
</ul>
<a name="setSwitcher(update_strategies.IUpdateStrategy)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSwitcher</h4>
<pre>public&nbsp;void&nbsp;setSwitcher(<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;mySwitcher)</pre>
<div class="block">Set a new strategy for the switcher balls</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>mySwitcher</code> - new strategy for Switcher balls</dd></dl>
</li>
</ul>
<a name="getSwitcher()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSwitcher</h4>
<pre>public&nbsp;<a href="../update_strategies/IUpdateStrategy.html" title="interface in update_strategies">IUpdateStrategy</a>&nbsp;getSwitcher()</pre>
<div class="block">Getter method for switcher strategy</div>
</li>
</ul>
<a name="makeSwitcherBall()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>makeSwitcherBall</h4>
<pre>public&nbsp;void&nbsp;makeSwitcherBall()</pre>
<div class="block">Switch all the balls at once to a single strategy</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallWorldModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../model/ViewAdapter.html" title="interface in model"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallWorldModel.html" target="_top">Frames</a></li>
<li><a href="BallWorldModel.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
